package SimonDiceV3;

/**
 * @author emi
 */
public class Record {
	//MAX JUGADORES + ARRAY
	private final int MAX_JUGADORES= 10;
	private Jugador[] players = new Jugador[MAX_JUGADORES];
	private Jugador jugador;
	private int puntuacion;
	//VARIABLE CONT PARA CONTAR A LOS JUGADORES, CONT ++ 
	private int cont = 0;
	
	//CONSTRUCTORA QUE INICIALIZA LOS ATRIBUTOS
	/**
	 * Record
	 * @param _player
	 * @param _puntuacion
	 */
	public Record(Jugador _player, int _puntuacion) {
		this.jugador = _player;
		this.puntuacion = _puntuacion;
	}
	/**
	 * addPlayer
	 * @param player
	 */
	public void addPlayer(Jugador player) {
		if (cont < MAX_JUGADORES) {
			this.players[cont] = player;
			
			this.cont++;
		}
		
	}
	/**
	 * getJugadorByName
	 * @param _nombre
	 * @return
	 */
	public Jugador getJugadorByName(String _nombre) {
		int i = 0;
		while (this.players[i].getNombre() != _nombre) {
			if (this.players[i].getNombre() == _nombre) {
				return jugador;
			}
			
			i++;
		}
		return null;
	}
	/**
	 * ordenarRanking metodo que se encarga de ordenar el array players
	 * Complejidad del metodo 0(n2)
	 */
	public void ordenarRanking() {
		int stoper = 0;
		if (stoper < MAX_JUGADORES) {
			stoper = cont;
		}else {
			stoper = MAX_JUGADORES;
		}
		
	        for (int i = 0; i < stoper - 1; i++) {
	            for (int h = 0; h < stoper - i - 1; h++) {
	                if (this.players[h + 1].getScore() > this.players[h].getScore()) {
	                    Jugador saver = this.players[h + 1];
	                    this.players[h + 1] = this.players[h];
	                    this.players[h] = saver;
	                }
	            }
	        }
	}
	/**
	 * showRancking metodo que ordena los jugadores, acto seguido imprime los jugadores existentes (hasta 10), en pantalla al ser pedido
	 */
	public void showRancking() {
		ordenarRanking();
		System.out.println("TOP 10 PLAYERS RANKING");
		System.out.println("----------------------");
		
		for (int i = 0; i < cont; i++) {
	        System.out.println((i + 1) + "." + " " + this.players[i].getNombre() + ": " + this.players[i].getScore());
	    }
	}
	/**
	 * showBestPlayer metodo que ordena los jugadores, acto seguido elige el primer jugador de la lista y lo imprime
	 */
	public void showBestPlayer() {
		ordenarRanking();
		System.out.println("TOP 1 PLAYER - HIGH SCORE");
		System.out.println("-------------------------");
		
		for (int i = 0; i < 1; i++) {
	        System.out.println((i + 1) + "." + " " + this.players[i].getNombre() + ": " + this.players[i].getScore());
	    }
	}
	
	//cargarRancking()
	
	//escribirRancking()
}
